// Generated by BUCKLESCRIPT VERSION 3.1.5, PLEASE EDIT WITH CARE
'use strict';

var List = require("bs-platform/lib/js/list.js");
var Block = require("bs-platform/lib/js/block.js");
var Curry = require("bs-platform/lib/js/curry.js");
var Pervasives = require("bs-platform/lib/js/pervasives.js");
var Layer$LonaCompilerCore = require("../core/layer.bs.js");
var Caml_builtin_exceptions = require("bs-platform/lib/js/caml_builtin_exceptions.js");

function anchorToString(param) {
  switch (param) {
    case 0 : 
        return "widthAnchor";
    case 1 : 
        return "heightAnchor";
    case 2 : 
        return "topAnchor";
    case 3 : 
        return "bottomAnchor";
    case 4 : 
        return "leadingAnchor";
    case 5 : 
        return "trailingAnchor";
    case 6 : 
        return "centerXAnchor";
    case 7 : 
        return "centerYAnchor";
    
  }
}

function anchorFromString(param) {
  switch (param) {
    case "bottomAnchor" : 
        return /* Bottom */3;
    case "centerXAnchor" : 
        return /* CenterX */6;
    case "centerYAnchor" : 
        return /* CenterY */7;
    case "heightAnchor" : 
        return /* Height */1;
    case "leadingAnchor" : 
        return /* Leading */4;
    case "topAnchor" : 
        return /* Top */2;
    case "trailingAnchor" : 
        return /* Trailing */5;
    case "widthAnchor" : 
        return /* Width */0;
    default:
      throw [
            Caml_builtin_exceptions.match_failure,
            [
              "constraint.re",
              57,
              2
            ]
          ];
  }
}

function cmpFromString(param) {
  switch (param) {
    case "equalTo" : 
        return /* Eq */0;
    case "greaterThanOrEqualTo" : 
        return /* Geq */1;
    case "lessThanOrEqualTo" : 
        return /* Leq */2;
    default:
      throw [
            Caml_builtin_exceptions.match_failure,
            [
              "constraint.re",
              68,
              2
            ]
          ];
  }
}

function cmpToString(param) {
  switch (param) {
    case 0 : 
        return "equalTo";
    case 1 : 
        return "greaterThanOrEqualTo";
    case 2 : 
        return "lessThanOrEqualTo";
    
  }
}

function getPriority(param) {
  if (param.tag) {
    return param[5];
  } else {
    return param[2];
  }
}

function getRole(param) {
  if (param.tag) {
    return param[6];
  } else {
    return param[3];
  }
}

function getConstraints(getRootLayerForComponentName, rootLayer) {
  var getProxyLayer = function (layer) {
    var match = layer[/* typeName */0];
    if (typeof match === "number") {
      return layer;
    } else {
      return Curry._2(getRootLayerForComponentName, layer, match[0]);
    }
  };
  var constrainAxes = function (layer) {
    var layer$1 = getProxyLayer(layer);
    var direction = Layer$LonaCompilerCore.getFlexDirection(layer$1);
    var isColumn = direction === "column";
    var primaryBeforeAnchor = isColumn ? /* Top */2 : /* Leading */4;
    var primaryAfterAnchor = isColumn ? /* Bottom */3 : /* Trailing */5;
    var secondaryBeforeAnchor = isColumn ? /* Leading */4 : /* Top */2;
    var secondaryAfterAnchor = isColumn ? /* Trailing */5 : /* Bottom */3;
    var secondaryCenterAnchor = isColumn ? /* CenterX */6 : /* CenterY */7;
    var primaryDimensionAnchor = isColumn ? /* Height */1 : /* Width */0;
    var secondaryDimensionAnchor = isColumn ? /* Width */0 : /* Height */1;
    var height = Layer$LonaCompilerCore.getNumberParameterOpt(/* Height */24, layer$1);
    var width = Layer$LonaCompilerCore.getNumberParameterOpt(/* Width */23, layer$1);
    var sizingRules = Layer$LonaCompilerCore.getSizingRules(Layer$LonaCompilerCore.findParent(rootLayer, layer$1), layer$1);
    var primarySizingRule = isColumn ? sizingRules[/* height */1] : sizingRules[/* width */0];
    var secondarySizingRule = isColumn ? sizingRules[/* width */0] : sizingRules[/* height */1];
    var flexChildren = List.filter((function (child) {
              return Layer$LonaCompilerCore.getNumberParameter(/* Flex */9, child) === 1.0;
            }))(List.map(getProxyLayer, layer$1[/* children */3]));
    var addConstraints = function (index, child) {
      var childSizingRules = Layer$LonaCompilerCore.getSizingRules(/* Some */[layer$1], child);
      var childSecondarySizingRule = isColumn ? childSizingRules[/* width */0] : childSizingRules[/* height */1];
      var firstViewConstraints = index !== 0 ? /* [] */0 : /* :: */[
          /* Relation */Block.__(1, [
              child,
              primaryBeforeAnchor,
              /* Eq */0,
              layer$1,
              primaryBeforeAnchor,
              /* Required */0,
              /* PrimaryBefore */0
            ]),
          /* [] */0
        ];
      var lastViewConstraints;
      if (index === (List.length(layer$1[/* children */3]) - 1 | 0)) {
        var match = List.length(flexChildren);
        var needsPrimaryAfterConstraint = typeof primarySizingRule === "number" && primarySizingRule !== 0 ? true : match !== 0;
        lastViewConstraints = needsPrimaryAfterConstraint ? /* :: */[
            /* Relation */Block.__(1, [
                child,
                primaryAfterAnchor,
                /* Eq */0,
                layer$1,
                primaryAfterAnchor,
                /* Required */0,
                /* PrimaryAfter */2
              ]),
            /* [] */0
          ] : /* [] */0;
      } else {
        lastViewConstraints = /* [] */0;
      }
      var middleViewConstraints;
      if (index !== 0) {
        var previousLayer = List.nth(layer$1[/* children */3], index - 1 | 0);
        middleViewConstraints = /* :: */[
          /* Relation */Block.__(1, [
              child,
              primaryBeforeAnchor,
              /* Eq */0,
              previousLayer,
              primaryAfterAnchor,
              /* Required */0,
              /* PrimaryBetween */1
            ]),
          /* [] */0
        ];
      } else {
        middleViewConstraints = /* [] */0;
      }
      var secondaryBeforeEqConstraint = /* Relation */Block.__(1, [
          child,
          secondaryBeforeAnchor,
          /* Eq */0,
          layer$1,
          secondaryBeforeAnchor,
          /* Required */0,
          /* SecondaryBefore */4
        ]);
      var secondaryAfterEqConstraint = /* Relation */Block.__(1, [
          child,
          secondaryAfterAnchor,
          /* Eq */0,
          layer$1,
          secondaryAfterAnchor,
          /* Required */0,
          /* SecondaryAfter */5
        ]);
      var secondaryCenterConstraint = /* Relation */Block.__(1, [
          child,
          secondaryCenterAnchor,
          /* Eq */0,
          layer$1,
          secondaryCenterAnchor,
          /* Required */0,
          /* SecondaryCenter */6
        ]);
      var secondaryAfterLeqConstraint = /* Relation */Block.__(1, [
          child,
          secondaryAfterAnchor,
          /* Leq */2,
          layer$1,
          secondaryAfterAnchor,
          /* Required */0,
          /* SecondaryAfter */5
        ]);
      var secondaryBeforeGeqConstraint = /* Relation */Block.__(1, [
          child,
          secondaryBeforeAnchor,
          /* Geq */1,
          layer$1,
          secondaryBeforeAnchor,
          /* Required */0,
          /* SecondaryBefore */4
        ]);
      var secondaryAfterFlexibleConstraint;
      var exit = 0;
      if (typeof secondarySizingRule === "number" && !(secondarySizingRule !== 0 || !(typeof childSecondarySizingRule === "number" && childSecondarySizingRule !== 0))) {
        secondaryAfterFlexibleConstraint = /* :: */[
          secondaryAfterLeqConstraint,
          /* [] */0
        ];
      } else {
        exit = 1;
      }
      if (exit === 1) {
        secondaryAfterFlexibleConstraint = typeof childSecondarySizingRule === "number" ? /* :: */[
            secondaryAfterEqConstraint,
            /* [] */0
          ] : /* [] */0;
      }
      var secondaryBeforeFlexibleConstraint;
      var exit$1 = 0;
      if (typeof secondarySizingRule === "number" && !(secondarySizingRule !== 0 || !(typeof childSecondarySizingRule === "number" && childSecondarySizingRule !== 0))) {
        secondaryBeforeFlexibleConstraint = /* :: */[
          secondaryBeforeGeqConstraint,
          /* [] */0
        ];
      } else {
        exit$1 = 1;
      }
      if (exit$1 === 1) {
        secondaryBeforeFlexibleConstraint = typeof childSecondarySizingRule === "number" ? /* :: */[
            secondaryBeforeEqConstraint,
            /* [] */0
          ] : /* [] */0;
      }
      var match$1 = Layer$LonaCompilerCore.getStringParameterOpt(/* AlignItems */6, layer$1);
      var secondaryConstraints;
      if (match$1) {
        switch (match$1[0]) {
          case "center" : 
              secondaryConstraints = typeof childSecondarySizingRule === "number" ? Pervasives.$at(secondaryBeforeFlexibleConstraint, Pervasives.$at(/* :: */[
                          secondaryCenterConstraint,
                          /* [] */0
                        ], secondaryAfterFlexibleConstraint)) : /* :: */[
                  secondaryCenterConstraint,
                  /* [] */0
                ];
              break;
          case "flex-end" : 
              secondaryConstraints = Pervasives.$at(secondaryBeforeFlexibleConstraint, /* :: */[
                    secondaryAfterEqConstraint,
                    /* [] */0
                  ]);
              break;
          default:
            secondaryConstraints = Pervasives.$at(/* :: */[
                  secondaryBeforeEqConstraint,
                  /* [] */0
                ], secondaryAfterFlexibleConstraint);
        }
      } else {
        secondaryConstraints = Pervasives.$at(/* :: */[
              secondaryBeforeEqConstraint,
              /* [] */0
            ], secondaryAfterFlexibleConstraint);
      }
      return Pervasives.$at(firstViewConstraints, Pervasives.$at(lastViewConstraints, Pervasives.$at(middleViewConstraints, secondaryConstraints)));
    };
    var flexChildrenConstraints;
    if (flexChildren) {
      var rest = flexChildren[1];
      var first = flexChildren[0];
      if (List.length(rest) > 0) {
        flexChildrenConstraints = List.map((function (param) {
                var anchor = primaryDimensionAnchor;
                var layer = param;
                return /* Relation */Block.__(1, [
                          first,
                          anchor,
                          /* Eq */0,
                          layer,
                          anchor,
                          /* Required */0,
                          /* FlexSibling */8
                        ]);
              }), rest);
      } else {
        flexChildrenConstraints = /* [] */0;
      }
    } else {
      flexChildrenConstraints = /* [] */0;
    }
    var fitContentSecondaryConstraint = function (child) {
      if (typeof secondarySizingRule === "number" && secondarySizingRule !== 0) {
        return /* :: */[
                /* Relation */Block.__(1, [
                    child,
                    secondaryDimensionAnchor,
                    /* Leq */2,
                    layer$1,
                    secondaryDimensionAnchor,
                    /* Low */1,
                    /* FitContentSecondary */7
                  ]),
                /* [] */0
              ];
      } else {
        return /* [] */0;
      }
    };
    var fitContentSecondaryConstraints = List.concat(List.map(fitContentSecondaryConstraint, List.map(getProxyLayer, layer$1[/* children */3])));
    var heightConstraint = height ? /* :: */[
        /* Dimension */Block.__(0, [
            layer$1,
            /* Height */1,
            /* Required */0,
            isColumn ? /* PrimaryDimension */9 : /* SecondaryDimension */10
          ]),
        /* [] */0
      ] : /* [] */0;
    var widthConstraint = width ? /* :: */[
        /* Dimension */Block.__(0, [
            layer$1,
            /* Width */0,
            /* Required */0,
            isColumn ? /* SecondaryDimension */10 : /* PrimaryDimension */9
          ]),
        /* [] */0
      ] : /* [] */0;
    return List.concat(Pervasives.$at(/* :: */[
                    heightConstraint,
                    /* :: */[
                      widthConstraint,
                      /* [] */0
                    ]
                  ], Pervasives.$at(/* :: */[
                        flexChildrenConstraints,
                        /* [] */0
                      ], Pervasives.$at(/* :: */[
                            fitContentSecondaryConstraints,
                            /* [] */0
                          ], List.mapi(addConstraints, List.map(getProxyLayer, layer$1[/* children */3]))))));
  };
  return List.concat(Layer$LonaCompilerCore.flatmap(constrainAxes, rootLayer));
}

exports.anchorToString = anchorToString;
exports.anchorFromString = anchorFromString;
exports.cmpFromString = cmpFromString;
exports.cmpToString = cmpToString;
exports.getPriority = getPriority;
exports.getRole = getRole;
exports.getConstraints = getConstraints;
/* Layer-LonaCompilerCore Not a pure module */
