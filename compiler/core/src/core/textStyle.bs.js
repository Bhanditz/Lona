// Generated by BUCKLESCRIPT VERSION 3.1.5, PLEASE EDIT WITH CARE
'use strict';

var List = require("bs-platform/lib/js/list.js");
var Curry = require("bs-platform/lib/js/curry.js");
var Json_decode = require("bs-json/src/Json_decode.js");
var Caml_builtin_exceptions = require("bs-platform/lib/js/caml_builtin_exceptions.js");

var emptyStyle = /* record */[
  /* id */"defaultStyle",
  /* name : None */0,
  /* fontName : None */0,
  /* fontFamily : None */0,
  /* fontWeight : None */0,
  /* fontSize : None */0,
  /* lineHeight : None */0,
  /* letterSpacing : None */0,
  /* color : None */0,
  /* extends : None */0
];

function normalizeFontWeight(value) {
  if (value) {
    switch (value[0]) {
      case "bold" : 
          return /* Some */["700"];
      case "normal" : 
          return /* Some */["400"];
      default:
        return value;
    }
  } else {
    return /* None */0;
  }
}

function normalizeId(string) {
  return string.replace((/\+/g), "Plus");
}

function find(textStyles, id) {
  var normalizedId = normalizeId(id);
  var exit = 0;
  var textStyle;
  try {
    textStyle = List.find((function (textStyle) {
            return textStyle[/* id */0] === normalizedId;
          }), textStyles);
    exit = 1;
  }
  catch (exn){
    if (exn === Caml_builtin_exceptions.not_found) {
      return /* None */0;
    } else {
      throw exn;
    }
  }
  if (exit === 1) {
    return /* Some */[textStyle];
  }
  
}

function lookup(textStyles, _style, f) {
  while(true) {
    var style = _style;
    var match = Curry._1(f, style);
    var match$1 = style[/* extends */9];
    if (match) {
      return /* Some */[match[0]];
    } else if (match$1) {
      var match$2 = find(textStyles, match$1[0]);
      if (match$2) {
        _style = match$2[0];
        continue ;
      } else {
        return /* None */0;
      }
    } else {
      return /* None */0;
    }
  };
}

function parseFile(content) {
  var parsed = JSON.parse(content);
  var parseTextStyle = function (json) {
    return /* record */[
            /* id */normalizeId(Json_decode.field("id", Json_decode.string, json)),
            /* name */Json_decode.optional((function (param) {
                    return Json_decode.field("name", Json_decode.string, param);
                  }), json),
            /* fontName */Json_decode.optional((function (param) {
                    return Json_decode.field("fontName", Json_decode.string, param);
                  }), json),
            /* fontFamily */Json_decode.optional((function (param) {
                    return Json_decode.field("fontFamily", Json_decode.string, param);
                  }), json),
            /* fontWeight */normalizeFontWeight(Json_decode.optional((function (param) {
                        return Json_decode.field("fontWeight", Json_decode.string, param);
                      }), json)),
            /* fontSize */Json_decode.optional((function (param) {
                    return Json_decode.field("fontSize", Json_decode.$$float, param);
                  }), json),
            /* lineHeight */Json_decode.optional((function (param) {
                    return Json_decode.field("lineHeight", Json_decode.$$float, param);
                  }), json),
            /* letterSpacing */Json_decode.optional((function (param) {
                    return Json_decode.field("letterSpacing", Json_decode.$$float, param);
                  }), json),
            /* color */Json_decode.optional((function (param) {
                    return Json_decode.field("color", Json_decode.string, param);
                  }), json),
            /* extends */Json_decode.optional((function (param) {
                    return Json_decode.field("extends", Json_decode.string, param);
                  }), json)
          ];
  };
  var styles = Json_decode.field("styles", (function (param) {
          return Json_decode.list(parseTextStyle, param);
        }), parsed);
  var match = Json_decode.optional((function (param) {
          return Json_decode.field("defaultStyleName", Json_decode.string, param);
        }), parsed);
  var defaultStyle;
  if (match) {
    var match$1 = find(styles, match[0]);
    defaultStyle = match$1 ? match$1[0] : emptyStyle;
  } else {
    defaultStyle = emptyStyle;
  }
  return /* record */[
          /* styles */styles,
          /* defaultStyle */defaultStyle
        ];
}

exports.emptyStyle = emptyStyle;
exports.normalizeFontWeight = normalizeFontWeight;
exports.normalizeId = normalizeId;
exports.find = find;
exports.lookup = lookup;
exports.parseFile = parseFile;
/* No side effect */
