// Generated by BUCKLESCRIPT VERSION 3.1.5, PLEASE EDIT WITH CARE
'use strict';

var List = require("bs-platform/lib/js/list.js");
var Block = require("bs-platform/lib/js/block.js");
var Curry = require("bs-platform/lib/js/curry.js");
var Json_decode = require("bs-json/src/Json_decode.js");

function $$return(param_0) {
  return /* Return */Block.__(0, [param_0]);
}

function literal(param_0) {
  return /* Literal */Block.__(1, [param_0]);
}

function stringLiteral(param_0) {
  return /* StringLiteral */Block.__(2, [param_0]);
}

function identifier(param_0) {
  return /* Identifier */Block.__(3, [param_0]);
}

function importDeclaration(param_0) {
  return /* ImportDeclaration */Block.__(4, [param_0]);
}

function importSpecifier(param_0) {
  return /* ImportSpecifier */Block.__(5, [param_0]);
}

function importDefaultSpecifier(param_0) {
  return /* ImportDefaultSpecifier */Block.__(6, [param_0]);
}

function classDeclaration(param_0) {
  return /* ClassDeclaration */Block.__(7, [param_0]);
}

function methodDefinition(param_0) {
  return /* MethodDefinition */Block.__(8, [param_0]);
}

function functionExpression(param_0) {
  return /* FunctionExpression */Block.__(9, [param_0]);
}

function callExpression(param_0) {
  return /* CallExpression */Block.__(10, [param_0]);
}

function jSXAttribute(param_0) {
  return /* JSXAttribute */Block.__(11, [param_0]);
}

function jSXElement(param_0) {
  return /* JSXElement */Block.__(12, [param_0]);
}

function jSXExpressionContainer(param_0) {
  return /* JSXExpressionContainer */Block.__(13, [param_0]);
}

function spreadElement(param_0) {
  return /* SpreadElement */Block.__(14, [param_0]);
}

function variableDeclaration(param_0) {
  return /* VariableDeclaration */Block.__(15, [param_0]);
}

function assignmentExpression(param_0) {
  return /* AssignmentExpression */Block.__(16, [param_0]);
}

function binaryExpression(param_0) {
  return /* BinaryExpression */Block.__(17, [param_0]);
}

function ifStatement(param_0) {
  return /* IfStatement */Block.__(18, [param_0]);
}

function arrayLiteral(param_0) {
  return /* ArrayLiteral */Block.__(19, [param_0]);
}

function objectLiteral(param_0) {
  return /* ObjectLiteral */Block.__(20, [param_0]);
}

function property(param_0) {
  return /* Property */Block.__(21, [param_0]);
}

function exportDefaultDeclaration(param_0) {
  return /* ExportDefaultDeclaration */Block.__(22, [param_0]);
}

function block(param_0) {
  return /* Block */Block.__(23, [param_0]);
}

function program(param_0) {
  return /* Program */Block.__(24, [param_0]);
}

function lineEndComment(param_0) {
  return /* LineEndComment */Block.__(25, [param_0]);
}

function map(f, node) {
  if (typeof node === "number") {
    return Curry._1(f, node);
  } else {
    switch (node.tag | 0) {
      case 0 : 
          return Curry._1(f, /* Return */Block.__(0, [map(f, node[0])]));
      case 7 : 
          var o = node[0];
          return Curry._1(f, /* ClassDeclaration */Block.__(7, [{
                          id: o.id,
                          superClass: o.superClass,
                          body: List.map((function (param) {
                                  return map(f, param);
                                }), o.body)
                        }]));
      case 8 : 
          var o$1 = node[0];
          return Curry._1(f, /* MethodDefinition */Block.__(8, [{
                          key: o$1.key,
                          value: map(f, o$1.value)
                        }]));
      case 9 : 
          var o$2 = node[0];
          return Curry._1(f, /* FunctionExpression */Block.__(9, [{
                          id: o$2.id,
                          params: o$2.params,
                          body: List.map((function (param) {
                                  return map(f, param);
                                }), o$2.body)
                        }]));
      case 10 : 
          var o$3 = node[0];
          return Curry._1(f, /* CallExpression */Block.__(10, [{
                          callee: map(f, o$3.callee),
                          arguments: List.map((function (param) {
                                  return map(f, param);
                                }), o$3.arguments)
                        }]));
      case 11 : 
          var o$4 = node[0];
          return Curry._1(f, /* JSXAttribute */Block.__(11, [{
                          name: o$4.name,
                          value: map(f, o$4.value)
                        }]));
      case 12 : 
          var o$5 = node[0];
          return Curry._1(f, /* JSXElement */Block.__(12, [{
                          tag: o$5.tag,
                          attributes: List.map((function (param) {
                                  return map(f, param);
                                }), o$5.attributes),
                          content: List.map((function (param) {
                                  return map(f, param);
                                }), o$5.content)
                        }]));
      case 13 : 
          return /* JSXExpressionContainer */Block.__(13, [Curry._1(f, node[0])]);
      case 14 : 
          return /* SpreadElement */Block.__(14, [Curry._1(f, node[0])]);
      case 15 : 
          return Curry._1(f, /* VariableDeclaration */Block.__(15, [map(f, node[0])]));
      case 16 : 
          var o$6 = node[0];
          return Curry._1(f, /* AssignmentExpression */Block.__(16, [{
                          left: map(f, o$6.left),
                          right: map(f, o$6.right)
                        }]));
      case 17 : 
          var o$7 = node[0];
          return Curry._1(f, /* BinaryExpression */Block.__(17, [{
                          left: map(f, o$7.left),
                          operator: o$7.operator,
                          right: map(f, o$7.right)
                        }]));
      case 18 : 
          var o$8 = node[0];
          return Curry._1(f, /* IfStatement */Block.__(18, [{
                          test: map(f, o$8.test),
                          consequent: List.map((function (param) {
                                  return map(f, param);
                                }), o$8.consequent)
                        }]));
      case 19 : 
          return Curry._1(f, /* ArrayLiteral */Block.__(19, [List.map((function (param) {
                                return map(f, param);
                              }), node[0])]));
      case 20 : 
          return Curry._1(f, /* ObjectLiteral */Block.__(20, [List.map((function (param) {
                                return map(f, param);
                              }), node[0])]));
      case 21 : 
          var o$9 = node[0];
          return Curry._1(f, /* Property */Block.__(21, [{
                          key: map(f, o$9.key),
                          value: map(f, o$9.value)
                        }]));
      case 22 : 
          return Curry._1(f, /* ExportDefaultDeclaration */Block.__(22, [map(f, node[0])]));
      case 23 : 
          return Curry._1(f, /* Block */Block.__(23, [List.map((function (param) {
                                return map(f, param);
                              }), node[0])]));
      case 24 : 
          return Curry._1(f, /* Program */Block.__(24, [List.map((function (param) {
                                return map(f, param);
                              }), node[0])]));
      case 25 : 
          var o$10 = node[0];
          return Curry._1(f, /* LineEndComment */Block.__(25, [{
                          comment: o$10.comment,
                          line: map(f, o$10.line)
                        }]));
      default:
        return Curry._1(f, node);
    }
  }
}

function optimizeTruthyBinaryExpression(node) {
  var booleanValue = function (sub) {
    if (typeof sub === "number" || sub.tag !== 1) {
      return /* None */0;
    } else {
      return Json_decode.optional(Json_decode.bool, sub[0][/* data */1]);
    }
  };
  if (typeof node === "number" || node.tag !== 17) {
    return node;
  } else {
    var o = node[0];
    var match = booleanValue(o.left);
    var match$1 = o.operator;
    var match$2 = booleanValue(o.right);
    var exit = 0;
    if (match$1 !== 0) {
      return node;
    } else if (match$2 && match$2[0]) {
      return o.left;
    } else {
      exit = 1;
    }
    if (exit === 1) {
      if (match && match[0]) {
        return o.right;
      } else {
        return node;
      }
    }
    
  }
}

function renameIdentifiers(node) {
  if (typeof node === "number" || node.tag !== 3) {
    return node;
  } else {
    var match = node[0];
    if (match) {
      var tail = match[1];
      switch (match[0]) {
        case "layers" : 
            if (tail) {
              return /* Identifier */Block.__(3, [/* :: */[
                          List.fold_left((function (a, b) {
                                  return a + ("$" + b);
                                }), tail[0], tail[1]),
                          /* [] */0
                        ]]);
            } else {
              return node;
            }
        case "parameters" : 
            return /* Identifier */Block.__(3, [/* :: */[
                        "this",
                        /* :: */[
                          "props",
                          tail
                        ]
                      ]]);
        default:
          return node;
      }
    } else {
      return node;
    }
  }
}

function optimize(node) {
  return map(optimizeTruthyBinaryExpression, node);
}

function prepareForRender(node) {
  return map(renameIdentifiers, node);
}

var eq = /* Eq */0;

var neq = /* Neq */1;

var gt = /* Gt */2;

var gte = /* Gte */3;

var lt = /* Lt */4;

var lte = /* Lte */5;

var plus = /* Plus */6;

var noop = /* Noop */7;

var empty = /* Empty */0;

var unknown = /* Unknown */1;

exports.eq = eq;
exports.neq = neq;
exports.gt = gt;
exports.gte = gte;
exports.lt = lt;
exports.lte = lte;
exports.plus = plus;
exports.noop = noop;
exports.$$return = $$return;
exports.literal = literal;
exports.stringLiteral = stringLiteral;
exports.identifier = identifier;
exports.importDeclaration = importDeclaration;
exports.importSpecifier = importSpecifier;
exports.importDefaultSpecifier = importDefaultSpecifier;
exports.classDeclaration = classDeclaration;
exports.methodDefinition = methodDefinition;
exports.functionExpression = functionExpression;
exports.callExpression = callExpression;
exports.jSXAttribute = jSXAttribute;
exports.jSXElement = jSXElement;
exports.jSXExpressionContainer = jSXExpressionContainer;
exports.spreadElement = spreadElement;
exports.variableDeclaration = variableDeclaration;
exports.assignmentExpression = assignmentExpression;
exports.binaryExpression = binaryExpression;
exports.ifStatement = ifStatement;
exports.arrayLiteral = arrayLiteral;
exports.objectLiteral = objectLiteral;
exports.property = property;
exports.exportDefaultDeclaration = exportDefaultDeclaration;
exports.block = block;
exports.program = program;
exports.lineEndComment = lineEndComment;
exports.empty = empty;
exports.unknown = unknown;
exports.map = map;
exports.optimizeTruthyBinaryExpression = optimizeTruthyBinaryExpression;
exports.renameIdentifiers = renameIdentifiers;
exports.optimize = optimize;
exports.prepareForRender = prepareForRender;
/* No side effect */
